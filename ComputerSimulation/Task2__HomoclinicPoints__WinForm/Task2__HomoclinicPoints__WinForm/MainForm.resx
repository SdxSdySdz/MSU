<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="MappingImage.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAPUAAABtCAYAAAB5hCdLAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAO
        wwAADsMBx2+oZAAADnpJREFUeF7tnPmLT98fx+cf8IsflJ/GL/KDJElESlEmlJQpki3ECNNkmwjFD2Tf
        kqTsS3aSH2SyZo9kJ9vY1xDGMrw+PY9zfO/3Pff9ft/lvJd73s9HXeOeeZt77rmv52s7d5QJIcQpKGpC
        HIOiJsQxKGpCHIOiJsQxKGqSaB49eiStWrWS48eP65HSYM6cOerwg6ImiaZHjx5pjdt14Mz87p2iJokF
        Bg3DLlWQnZSVlalsxQtFTRILDLpUo7QBTm3EiBH67C8UNUkkELNflEo63759k7Fjx6p7w9G7d2959+6d
        /m5T/NaBoiaJBBHKtdQb4h00aJDcuXNHnRuBt2/f/t9YKhBzasZCUZPE4WfILrB161Y5c+aMPvsLhI5o
        PXfuXD3SFDg3NAwNFDVJHCbldFHUuC+vsE20xoG/+4Ga2puCU9QkcRhRl8LedJBIbURt1oOiJokDqSaM
        uBRA1M5UU4MNGzao9TCZC0VNEgcMuBT2p02UTq2zUzH71WZri6ImicI0yVwXtamlUWdnw6yJaZZR1CRR
        pBpwJv78+aOi3bZt22T69OlpG03FCGrobBHaQFGTRBNU1BBEeXm5zJw5U8aNG5exe1xspG5tYd4HDhzQ
        Z/54sxeKOgP379+XZcuW6bPCcu7cOdm+fbs+K11S68cgIOolRdQQdGrKjWzj6NGj+swfrAkO9Xf1J/EF
        HcelS5fqs8ICzx2kvnIdI+og6bchKaLGMzbiTD2ypeL4jG+k/v37t1y/fl2qq6tl4cKF8uvXL/n+/bus
        WbNGpTLz58+XxsZG/Wn7XLt2TdavX6+uG4VPnz6p+mngwIFy69YtNXb79m0ZMGCAdOrUSe7evavGghJV
        1FhHXH/evHlSVVUlX7580d8RWbVqlQwZMkQ+fPigR4JhQ9T19fXq2TZv3lytB6L/jRs3pHv37uprPsCz
        xb0MHz5cZR6oez9//iyzZs2Sli1bZs1GwtTUhmIQtW3b9GLWxFfUXk+BvTE86MOHD8ubN2/0J3ILHMbi
        xYtl5cqVypmEAQ8MD87MH4K6d++enDhxQoksClFFffnyZWWgmEfHjh1VGm/YvXu3dOvWLeO+ox9xRQ1D
        6ty5s9TW1iqH8uzZM5k2bZo6nzRpUuj13rhxo7q3mzdv6pFg4B7MM6qoqFAGiXrR6/iygX+bJFHnwja9
        ZG2UwXPW1dWpyDxs2DB5/vy5/k5+wMMdP368OqI4E3h9RMc2bdr8iwRRiZN+47pbtmyRZs2aqYhogONa
        t26dfPz4UY8EI46oIeLKykr1PBExDJgfnM+xY8f0SHB27NghXbp0UcYZFhgyrt2iRQvlWLxzCgIMOMyW
        VrGk3zZt04sRdcZ9anhteO+amhr58eOHHg2ON+LHOeB5MOGwXLhwQS0cImYQcL8TJ070nUO6A/eYDROx
        vZ9FxMzU9IAA+/fv73tNvyPb20YAJQ3mgXUxwLkg5UX6F7YUsAGuiWtHcZoQNO49qG1EEfWePXuarHWm
        A9cIQljbDILpM2R8owweBLVfr1698pZ6G169eqWMesqUKZGv/eTJE+natats2rRJj0QjTqQG+PcQnYmw
        MCrMKUrEiBqpER2GDh3axKgfPnyo0vG9e/fqkfzy8+dPmTx5sowePVq+fv2qR4OR+gsM2SiWSA1s2aaX
        1HfhfUX9+PFjWbFihXroNj1KNkxNHadZBoe0f/9+tTcZNdMwxBU1nBIco3mA6E9ki6rpiCpq86qh14iw
        RkuWLFGGECTjyAVXr16VRYsWKQOHvYXBvOuMr0EoFlHbtE0vyGixHoYmooaY0LhAIwWdurVr16pxeFMb
        RX0m4na/AbqI58+fl4MHD6qbRU8AP6+hoUF/IjhxRe39DRv8LIg6KnFF7f23KAHQ5Fq9enWsOUUFfRPY
        GBqIEDXKERg8bAxfsxF2r7pYRG3TNr1gLbw9hn+ihpiwjYWmDpofWFx06bAYOEeNEWTBC8GLFy9k8ODB
        cuXKFWWkWCiICIZ76tQpOXToUOhoAOKKGkaE9YNnhhHHcVZRRW1qZ6S5SMXhrFHeLFiwQN6+fSvLly+X
        Bw8eqOebSzCP2bNnqwYRGrEos8z6wM6wlRqmYQcjNt3eTKBfglIO9lGI3kGubNNgmmTe3y3/J2oYXdu2
        bZUXNOKFIaGoxz51HIPMNaa7i2YXDBfAYCZMmCD9+vWL1KEFcd8oQ3qFNAud/DBbNn7EeaPs/fv3MmPG
        DLU/jZIKnWs8Tzxn9E569uwZy7CCgGvBgWA7z7snjrnA7vbt2xcqaJg6Ml1dDeGgn4HPpB5RnGNUcmWb
        BrMOXpqk38QeEA5SXEQlYh9Ea2+EKkX81oCizhHoPyDNfP36tR4htoExw6ijbHu6gEm9U++forYIUljU
        q2iGIK3M94s7pUgpR2v0FPzunaK2CF6ZxHu8qF9Rx5LcgyhVitEaYk7X/aeoCXEMipoQx6CoCXEMipoQ
        x6CoCXEMipoQx6CoCXEMipoQx6CoCXEMipoQx6CoCXEMipoQx6CoCXEMipoQx6CoCXEMipoQx6CoCXEM
        ipoQx6CoCXGMMvz/yDx48HDnYKQmxDEoakIcg6ImxDEoakIcg6ImxDEoakIcg6ImxDEoakIcg6ImxDEo
        akIcg6ImxDEoakIcg6ImxDEoakIcg6ImxDEoakIcg6ImxDEoalJwHj16JK1atZLjx4/rkdJgzpw56rAN
        RU0KTo8ePXJi3EkAzsz2vVPUpKDAoGHYpQqyk7KyMpWt2IKiJgUFBl2qUdoApzZixAh9Fh+KmhQMiNl2
        lCoWtm7dqu7NHGfOnNHfaYrtdaCoScFAhHIx9Z47d64StcEI3DvmBWLG921lLBQ1KQi2DblYwP+7vXTp
        Un32PyD03r17y7t37/TI/wPnhoahDShqUhBMyumiqNu3b69E7AVRGuP4vh+oqW2l4BQ1KQhG1KWyN50t
        UhtR21gPipoUBKSaMOJSAEKGoNPV1GDDhg3WMheKmhQEGHCp7E8jSqem46mY/WobW1sUNck7pklWCqJG
        dB47dqx8+/ZNj/hj1sRGs4yiJnknrAFDEKdPn5aqqqq0jaZiBHvT2SK0gaImiSaoAaMWraiokMrKSrVN
        lKl7XGz4bW0dPXo0baMM2MpeKOoM3L9/X5YtW6bPiC2i1I+IekkRNeY4derUJin3gQMHMqbhWBMccaGo
        M+DnbUl8jKjDpJpJEbXpdBuBeo9sqTg+Yz1Sw4tgwUeOHKla7IZPnz7J4MGDZdWqVfLnzx89ap9r167J
        +vXr5devX3okOJhXfX29LF++XM31xYsX+jsihw8flp49e8rjx4/1SDBsiBpzqq6ulubNm0unTp3k3Llz
        cuPGDenevbv6mg9+//4t169fV/NYuHChWt/v37/LmjVrpLy8XObPny+NjY3607knSv1YDKKGDrZt2yYD
        Bw6UW7duqbHbt2/LgAED1LO9e/euGouCWRProoYBG68yfvx4aWhoUOMQ+5QpU2TcuHEZ04e4wLAWL14s
        K1euVEYXBgi2a9euau7NmjVT4jGcPXtW2rVrl/Glej/iihoPvnPnzlJbWysfPnyQZ8+eybRp09T5pEmT
        Qt/jxo0bpWPHjnLz5k09Egzct3muEAacCRzdmzdv9CfCEXUeXjCXJIkado8utlnHefPmyb179+TEiRPK
        acYlp42yL1++yJgxY6Rv377KEA3Pnz+XzZs367PcgevDoeCIYnR1dXXSsmVL2blzpx75C87zGamxdmjw
        DBs2THl4w5YtW9T8jh07pkeCs2PHDunSpYsyprAgk8HaIDJjTnieUYkzDwMMOExUKpb0+/Pnz6oL36ZN
        G9m+fbu1zNWIOmf71DBk7yttmPihQ4fUhYPgjQxxDnitoNc0mIjtfXvn5cuXsmvXrrQPABFz4sSJvnNI
        d2SL+igjIN4LFy7okb+ZyKxZs1S65nWY+QL3iQyhpqZGfvz4oUcLAwSNdQxjU2FFvWfPnibPLdMRdPsJ
        zxSivnz5sh6Jj+kz5OyNstSXz9EFRrqWD169eiX9+/dX6X6USG0aFeYBQUiI0lF+VtRIDW8+dOjQJi8d
        PHz4UKXje/fu1SP5BU4NfZFevXpFTr1tEfYXGIolUoMnT56owLFp0yY9Eh+b78L7ivrkyZOqBkUTAEaJ
        Ggppca4xNXXUZhn4+vWrjB49Wi0SjPj8+fNZo2o6ooraOBbvQ8dclixZoh5c1PnEBVnMihUrlGOxGWWi
        YN519jZkM1EsosZz3L9/v+ov2cx4kJViPWzg+1OwgMb4kHYjUueDON1vg2lo4EBkRP0XtbMbV9TeEgBN
        MzSXVq9enbesxwvWFPukaNahe7t27Vo1Didoo9ETlrB71cUianS4ESgOHjyohIjeBNbWNJWjgrWw0fkG
        vqLGwmEBYdAXL17Uo8kBqTeaVNh+iJNhRBW1qZ2RMSAVh5BQUixYsEDevn2rtt0ePHigar5cAyeJbSzs
        BqCxhUiDzi2cHs4xB4wVAhhxkG4v5gdH2Lp1a7l06ZIezR/YHsU26ZUrV9Q8IGLYBpz0qVOnVOAL24T1
        YppkNupp4CtqTLBbt25KFIV64HGAECEi1OdxiPNG2fv372XGjBlqfxrpLjIGGAPWE3VtlH3zKCA6t23b
        VkVG8ywR9dDowT51nKwoLqaOTFdXp24jeY/UfkUuMTsZaKbCSQNce8KECdKvX79YuwDArIMtfH/S06dP
        Zd26dQV94FGB4WLbyLwcQIobRGtbESqp2F6DJqKGJzpy5EhiBY1yIV89ABIfGDOMOuzWpSuY1Nvm/StR
        oyYYNWqUepUQ+7lh33QqJEiNsH2EWgfNi0I3Ukh4Sjlao6dg+96VqLFl1aFDh391X5JA3dynTx/1vjre
        sybJA1GqFKM1xGzjDbJU7FXnhJCigKImxDEoakIcg6ImxDEoakIcg6ImxDEoakIcg6ImxDEoakKcQuQ/
        o2SYV7MvqPoAAAAASUVORK5CYII=
</value>
  </data>
</root>